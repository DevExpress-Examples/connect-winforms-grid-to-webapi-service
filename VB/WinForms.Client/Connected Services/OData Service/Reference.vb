'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
' Generation date: 5/16/2024 3:42:46 PM
Namespace DevExpress.Persistent.Base

    ''' <summary>
    ''' Class containing all extension methods
    ''' </summary>
    Public Module ExtensionMethods
    End Module
End Namespace

Namespace DevExpress.ExpressApp.SystemModule

    ''' <summary>
    ''' Class containing all extension methods
    ''' </summary>
    Public Module ExtensionMethods
    End Module
End Namespace

Namespace DevExpress.ExpressApp

    ''' <summary>
    ''' Class containing all extension methods
    ''' </summary>
    Public Module ExtensionMethods
    End Module
End Namespace

Namespace DevExpress.ExpressApp.SystemModule.Notifications

    ''' <summary>
    ''' Class containing all extension methods
    ''' </summary>
    Public Module ExtensionMethods
    End Module
End Namespace

Namespace DevExpress.ExpressApp.Security

    ''' <summary>
    ''' Class containing all extension methods
    ''' </summary>
    Public Module ExtensionMethods
    End Module
End Namespace

Namespace DevExpress.Persistent.BaseImpl.EF

    ''' <summary>
    ''' There are no comments for BaseObjectSingle in the schema.
    ''' </summary>
    <Global.Microsoft.OData.Client.OriginalNameAttribute("BaseObjectSingle")>
    Public Partial Class BaseObjectSingle
        Inherits Global.Microsoft.OData.Client.DataServiceQuerySingle(Of BaseObject)

        ''' <summary>
        ''' Initialize a new BaseObjectSingle object.
        ''' </summary>
        Public Sub New(ByVal context As Global.Microsoft.OData.Client.DataServiceContext, ByVal path As String)
            MyBase.New(context, path)
        End Sub

        ''' <summary>
        ''' Initialize a new BaseObjectSingle object.
        ''' </summary>
        Public Sub New(ByVal context As Global.Microsoft.OData.Client.DataServiceContext, ByVal path As String, ByVal isComposable As Boolean)
            MyBase.New(context, path, isComposable)
        End Sub

        ''' <summary>
        ''' Initialize a new BaseObjectSingle object.
        ''' </summary>
        Public Sub New(ByVal query As Global.Microsoft.OData.Client.DataServiceQuerySingle(Of BaseObject))
            MyBase.New(query)
        End Sub
    End Class

    ''' <summary>
    ''' There are no comments for BaseObject in the schema.
    ''' </summary>
    ''' <KeyProperties>
    ''' ID
    ''' </KeyProperties>
    <Global.Microsoft.OData.Client.Key("ID")>
    <Global.Microsoft.OData.Client.OriginalNameAttribute("BaseObject")>
    Public MustInherit Partial Class BaseObject
        Inherits Global.Microsoft.OData.Client.BaseEntityType
        Implements Global.System.ComponentModel.INotifyPropertyChanged

        ''' <summary>
        ''' There are no comments for Property ID in the schema.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        <Global.Microsoft.OData.Client.OriginalNameAttribute("ID")>
        <Global.System.ComponentModel.DataAnnotations.RequiredAttribute(ErrorMessage:="ID is required.")>
        Public Overridable Property ID As Global.System.Guid
            Get
                Return _ID
            End Get

            Set(ByVal value As Global.System.Guid)
                Me.OnIDChanging(value)
                _ID = value
                OnIDChanged()
                Me.OnPropertyChanged("ID")
            End Set
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Private _ID As Global.System.Guid

        Partial Private Sub OnIDChanging(ByVal value As Global.System.Guid)
        End Sub

        Partial Private Sub OnIDChanged()
        End Sub

        ''' <summary>
        ''' This event is raised when the value of the property is changed
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Public Event PropertyChanged As Global.System.ComponentModel.PropertyChangedEventHandler

        ''' <summary>
        ''' The value of the property is changed
        ''' </summary>
        ''' <param name="property">property name</param>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Protected Overridable Sub OnPropertyChanged(ByVal [property] As String)
            RaiseEvent PropertyChangedEvent(Me, New Global.System.ComponentModel.PropertyChangedEventArgs([property]))
        End Sub
    End Class

    ''' <summary>
    ''' Class containing all extension methods
    ''' </summary>
    Public Module ExtensionMethods

        ''' <summary>
        ''' Get an entity of type global::DevExpress.Persistent.BaseImpl.EF.BaseObject as global::DevExpress.Persistent.BaseImpl.EF.BaseObjectSingle specified by key from an entity set
        ''' </summary>
        ''' <param name="_source">source entity set</param>
        ''' <param name="_keys">dictionary with the names and values of keys</param>
        <Extension()>
        Public Function ByKey(ByVal _source As Global.Microsoft.OData.Client.DataServiceQuery(Of Global.DevExpress.Persistent.BaseImpl.EF.BaseObject), ByVal _keys As Global.System.Collections.Generic.IDictionary(Of String, Object)) As Global.DevExpress.Persistent.BaseImpl.EF.BaseObjectSingle
            Return New Global.DevExpress.Persistent.BaseImpl.EF.BaseObjectSingle(_source.Context, _source.GetKeyPath(Global.Microsoft.OData.Client.Serializer.GetKeyString(_source.Context, _keys)))
        End Function

        ''' <summary>
        ''' Get an entity of type global::DevExpress.Persistent.BaseImpl.EF.BaseObject as global::DevExpress.Persistent.BaseImpl.EF.BaseObjectSingle specified by key from an entity set
        ''' </summary>
        ''' <param name="_source">source entity set</param>
        ''' <param name="iD">The value of iD</param>
        <Extension()>
        Public Function ByKey(ByVal _source As Global.Microsoft.OData.Client.DataServiceQuery(Of Global.DevExpress.Persistent.BaseImpl.EF.BaseObject), ByVal iD As Global.System.Guid) As Global.DevExpress.Persistent.BaseImpl.EF.BaseObjectSingle
            Dim _keys As Global.System.Collections.Generic.IDictionary(Of String, Object) = New Global.System.Collections.Generic.Dictionary(Of String, Object) From {{"ID", iD}}
            Return New Global.DevExpress.Persistent.BaseImpl.EF.BaseObjectSingle(_source.Context, _source.GetKeyPath(Global.Microsoft.OData.Client.Serializer.GetKeyString(_source.Context, _keys)))
        End Function
    End Module
End Namespace

Namespace DevExpress.Persistent.BaseImpl.EF.PermissionPolicy

    ''' <summary>
    ''' Class containing all extension methods
    ''' </summary>
    Public Module ExtensionMethods
    End Module
End Namespace

Namespace OData.Server.BusinessObjects

    ''' <summary>
    ''' There are no comments for OrderItemSingle in the schema.
    ''' </summary>
    <Global.Microsoft.OData.Client.OriginalNameAttribute("OrderItemSingle")>
    Public Partial Class OrderItemSingle
        Inherits Global.Microsoft.OData.Client.DataServiceQuerySingle(Of OrderItem)

        ''' <summary>
        ''' Initialize a new OrderItemSingle object.
        ''' </summary>
        Public Sub New(ByVal context As Global.Microsoft.OData.Client.DataServiceContext, ByVal path As String)
            MyBase.New(context, path)
        End Sub

        ''' <summary>
        ''' Initialize a new OrderItemSingle object.
        ''' </summary>
        Public Sub New(ByVal context As Global.Microsoft.OData.Client.DataServiceContext, ByVal path As String, ByVal isComposable As Boolean)
            MyBase.New(context, path, isComposable)
        End Sub

        ''' <summary>
        ''' Initialize a new OrderItemSingle object.
        ''' </summary>
        Public Sub New(ByVal query As Global.Microsoft.OData.Client.DataServiceQuerySingle(Of OrderItem))
            MyBase.New(query)
        End Sub
    End Class

    ''' <summary>
    ''' There are no comments for OrderItem in the schema.
    ''' </summary>
    ''' <KeyProperties>
    ''' ID
    ''' </KeyProperties>
    <Global.Microsoft.OData.Client.Key("ID")>
    <Global.Microsoft.OData.Client.OriginalNameAttribute("OrderItem")>
    Public Partial Class OrderItem
        Inherits Global.Microsoft.OData.Client.BaseEntityType
        Implements Global.System.ComponentModel.INotifyPropertyChanged

        ''' <summary>
        ''' Create a new OrderItem object.
        ''' </summary>
        ''' <param name="ID">Initial value of ID.</param>
        ''' <param name="orderID">Initial value of OrderID.</param>
        ''' <param name="unitPrice">Initial value of UnitPrice.</param>
        ''' <param name="quantity">Initial value of Quantity.</param>
        ''' <param name="discount">Initial value of Discount.</param>
        ''' <param name="orderDate">Initial value of OrderDate.</param>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Public Shared Function CreateOrderItem(ByVal ID As Guid, ByVal unitPrice As Decimal, ByVal quantity As Integer, ByVal discount As Single, ByVal orderDate As Global.System.DateTimeOffset) As OrderItem
            Dim orderItem As OrderItem = New OrderItem()
            orderItem.ID = ID
            orderItem.UnitPrice = unitPrice
            orderItem.Quantity = quantity
            orderItem.Discount = discount
            orderItem.OrderDate = orderDate
            Return orderItem
        End Function

        ''' <summary>
        ''' There are no comments for Property ID in the schema.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        <Global.Microsoft.OData.Client.OriginalNameAttribute("ID")>
        <Global.System.ComponentModel.DataAnnotations.RequiredAttribute(ErrorMessage:="ID is required.")>
        Public Overridable Property ID As Guid
            Get
                Return _ID
            End Get

            Set(ByVal value As Guid)
                Me.OnIDChanging(value)
                _ID = value
                OnIDChanged()
                Me.OnPropertyChanged("ID")
            End Set
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Private _ID As Guid

        Partial Private Sub OnIDChanging(ByVal value As Guid)
        End Sub

        Partial Private Sub OnIDChanged()
        End Sub

        ''' <summary>
        ''' There are no comments for Property ProductName in the schema.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        <Global.Microsoft.OData.Client.OriginalNameAttribute("ProductName")>
        Public Overridable Property ProductName As String
            Get
                Return _ProductName
            End Get

            Set(ByVal value As String)
                Me.OnProductNameChanging(value)
                _ProductName = value
                OnProductNameChanged()
                Me.OnPropertyChanged("ProductName")
            End Set
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Private _ProductName As String

        Partial Private Sub OnProductNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnProductNameChanged()
        End Sub

        ''' <summary>
        ''' There are no comments for Property UnitPrice in the schema.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        <Global.Microsoft.OData.Client.OriginalNameAttribute("UnitPrice")>
        <Global.System.ComponentModel.DataAnnotations.RequiredAttribute(ErrorMessage:="UnitPrice is required.")>
        Public Overridable Property UnitPrice As Decimal
            Get
                Return _UnitPrice
            End Get

            Set(ByVal value As Decimal)
                Me.OnUnitPriceChanging(value)
                _UnitPrice = value
                OnUnitPriceChanged()
                Me.OnPropertyChanged("UnitPrice")
            End Set
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Private _UnitPrice As Decimal

        Partial Private Sub OnUnitPriceChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnUnitPriceChanged()
        End Sub

        ''' <summary>
        ''' There are no comments for Property Quantity in the schema.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        <Global.Microsoft.OData.Client.OriginalNameAttribute("Quantity")>
        <Global.System.ComponentModel.DataAnnotations.RequiredAttribute(ErrorMessage:="Quantity is required.")>
        Public Overridable Property Quantity As Integer
            Get
                Return _Quantity
            End Get

            Set(ByVal value As Integer)
                Me.OnQuantityChanging(value)
                _Quantity = value
                OnQuantityChanged()
                Me.OnPropertyChanged("Quantity")
            End Set
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Private _Quantity As Integer

        Partial Private Sub OnQuantityChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnQuantityChanged()
        End Sub

        ''' <summary>
        ''' There are no comments for Property Discount in the schema.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        <Global.Microsoft.OData.Client.OriginalNameAttribute("Discount")>
        <Global.System.ComponentModel.DataAnnotations.RequiredAttribute(ErrorMessage:="Discount is required.")>
        Public Overridable Property Discount As Single
            Get
                Return _Discount
            End Get

            Set(ByVal value As Single)
                Me.OnDiscountChanging(value)
                _Discount = value
                OnDiscountChanged()
                Me.OnPropertyChanged("Discount")
            End Set
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Private _Discount As Single

        Partial Private Sub OnDiscountChanging(ByVal value As Single)
        End Sub

        Partial Private Sub OnDiscountChanged()
        End Sub

        ''' <summary>
        ''' There are no comments for Property OrderDate in the schema.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        <Global.Microsoft.OData.Client.OriginalNameAttribute("OrderDate")>
        <Global.System.ComponentModel.DataAnnotations.RequiredAttribute(ErrorMessage:="OrderDate is required.")>
        Public Overridable Property OrderDate As Global.System.DateTimeOffset
            Get
                Return _OrderDate
            End Get

            Set(ByVal value As Global.System.DateTimeOffset)
                Me.OnOrderDateChanging(value)
                _OrderDate = value
                OnOrderDateChanged()
                Me.OnPropertyChanged("OrderDate")
            End Set
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Private _OrderDate As Global.System.DateTimeOffset

        Partial Private Sub OnOrderDateChanging(ByVal value As Global.System.DateTimeOffset)
        End Sub

        Partial Private Sub OnOrderDateChanged()
        End Sub

        ''' <summary>
        ''' This event is raised when the value of the property is changed
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Public Event PropertyChanged As Global.System.ComponentModel.PropertyChangedEventHandler

        ''' <summary>
        ''' The value of the property is changed
        ''' </summary>
        ''' <param name="property">property name</param>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Protected Overridable Sub OnPropertyChanged(ByVal [property] As String)
            RaiseEvent PropertyChangedEvent(Me, New Global.System.ComponentModel.PropertyChangedEventArgs([property]))
        End Sub
    End Class

    ''' <summary>
    ''' Class containing all extension methods
    ''' </summary>
    Public Module ExtensionMethods

        ''' <summary>
        ''' Get an entity of type global::OData.Server.BusinessObjects.OrderItem as global::OData.Server.BusinessObjects.OrderItemSingle specified by key from an entity set
        ''' </summary>
        ''' <param name="_source">source entity set</param>
        ''' <param name="_keys">dictionary with the names and values of keys</param>
        <Extension()>
        Public Function ByKey(ByVal _source As Global.Microsoft.OData.Client.DataServiceQuery(Of Global.OData.Server.BusinessObjects.OrderItem), ByVal _keys As Global.System.Collections.Generic.IDictionary(Of String, Object)) As Global.OData.Server.BusinessObjects.OrderItemSingle
            Return New Global.OData.Server.BusinessObjects.OrderItemSingle(_source.Context, _source.GetKeyPath(Global.Microsoft.OData.Client.Serializer.GetKeyString(_source.Context, _keys)))
        End Function

        ''' <summary>
        ''' Get an entity of type global::OData.Server.BusinessObjects.OrderItem as global::OData.Server.BusinessObjects.OrderItemSingle specified by key from an entity set
        ''' </summary>
        ''' <param name="_source">source entity set</param>
        ''' <param name="ID">The value of ID</param>
        <Extension()>
        Public Function ByKey(ByVal _source As Global.Microsoft.OData.Client.DataServiceQuery(Of Global.OData.Server.BusinessObjects.OrderItem), ByVal ID As Integer) As Global.OData.Server.BusinessObjects.OrderItemSingle
            Dim _keys As Global.System.Collections.Generic.IDictionary(Of String, Object) = New Global.System.Collections.Generic.Dictionary(Of String, Object) From {{"ID", ID}}
            Return New Global.OData.Server.BusinessObjects.OrderItemSingle(_source.Context, _source.GetKeyPath(Global.Microsoft.OData.Client.Serializer.GetKeyString(_source.Context, _keys)))
        End Function
    End Module
End Namespace

Namespace System
End Namespace

Namespace System.Reflection
End Namespace

Namespace DevExpress.ExpressApp.Editors
End Namespace

Namespace DevExpress.ExpressApp.Templates
End Namespace

Namespace [Default]

    ''' <summary>
    ''' There are no comments for Container in the schema.
    ''' </summary>
    <Global.Microsoft.OData.Client.OriginalNameAttribute("Container")>
    Public Partial Class Container
        Inherits Global.Microsoft.OData.Client.DataServiceContext

        ''' <summary>
        ''' Initialize a new Container object.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Public Sub New(ByVal serviceRoot As Global.System.Uri)
            Me.New(serviceRoot, Global.Microsoft.OData.Client.ODataProtocolVersion.V4)
        End Sub

        ''' <summary>
        ''' Initialize a new Container object.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Public Sub New(ByVal serviceRoot As Global.System.Uri, ByVal protocolVersion As Global.Microsoft.OData.Client.ODataProtocolVersion)
            MyBase.New(serviceRoot, protocolVersion)
            Me.ResolveName = New Global.System.Func(Of Global.System.Type, String)(AddressOf Me.ResolveNameFromType)
            Me.ResolveType = New Global.System.Func(Of String, Global.System.Type)(AddressOf Me.ResolveTypeFromName)
            OnContextCreated()
            Me.Format.LoadServiceModel = AddressOf [Default].Container.GeneratedEdmModel.GetInstance
            Me.Format.UseJson()
        End Sub

        Partial Private Sub OnContextCreated()
        End Sub

        ''' <summary>
        ''' Since the namespace configured for this service reference
        ''' in Visual Studio is different from the one indicated in the
        ''' server schema, use type-mappers to map between the two.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Protected Function ResolveTypeFromName(ByVal typeName As String) As Global.System.Type
            Dim resolvedType As Global.System.Type = Me.DefaultResolveType(typeName, "DevExpress.Persistent.BaseImpl.EF.PermissionPolicy", "DevExpress.Persistent.BaseImpl.EF.PermissionPolicy")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "DevExpress.ExpressApp.SystemModule.Notifications", "DevExpress.ExpressApp.SystemModule.Notifications")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "OData.Server.BusinessObjects", "OData.Server.BusinessObjects")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "DevExpress.ExpressApp.SystemModule", "DevExpress.ExpressApp.SystemModule")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "DevExpress.Persistent.BaseImpl.EF", "DevExpress.Persistent.BaseImpl.EF")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "DevExpress.ExpressApp.Templates", "DevExpress.ExpressApp.Templates")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "DevExpress.ExpressApp.Security", "DevExpress.ExpressApp.Security")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "DevExpress.ExpressApp.Editors", "DevExpress.ExpressApp.Editors")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "DevExpress.Persistent.Base", "DevExpress.Persistent.Base")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "DevExpress.ExpressApp", "DevExpress.ExpressApp")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "System.Reflection", "System.Reflection")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "Default", "Default")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            resolvedType = Me.DefaultResolveType(typeName, "System", "System")
            If resolvedType IsNot Nothing Then
                Return resolvedType
            End If

            Return Nothing
        End Function

        ''' <summary>
        ''' Since the namespace configured for this service reference
        ''' in Visual Studio is different from the one indicated in the
        ''' server schema, use type-mappers to map between the two.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Protected Function ResolveNameFromType(ByVal clientType As Global.System.Type) As String
            Dim originalNameAttribute As Global.Microsoft.OData.Client.OriginalNameAttribute = CType(Global.System.Linq.Enumerable.SingleOrDefault(Global.Microsoft.OData.Client.Utility.GetCustomAttributes(clientType, GetType(Global.Microsoft.OData.Client.OriginalNameAttribute), True)), Global.Microsoft.OData.Client.OriginalNameAttribute)
            If clientType.[Namespace].Equals("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("DevExpress.ExpressApp.SystemModule.Notifications", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("DevExpress.ExpressApp.SystemModule.Notifications.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("DevExpress.ExpressApp.SystemModule.Notifications.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("OData.Server.BusinessObjects", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("OData.Server.BusinessObjects.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("OData.Server.BusinessObjects.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("DevExpress.ExpressApp.SystemModule", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("DevExpress.ExpressApp.SystemModule.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("DevExpress.ExpressApp.SystemModule.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("DevExpress.Persistent.BaseImpl.EF", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("DevExpress.Persistent.BaseImpl.EF.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("DevExpress.Persistent.BaseImpl.EF.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("DevExpress.ExpressApp.Templates", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("DevExpress.ExpressApp.Templates.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("DevExpress.ExpressApp.Templates.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("DevExpress.ExpressApp.Security", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("DevExpress.ExpressApp.Security.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("DevExpress.ExpressApp.Security.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("DevExpress.ExpressApp.Editors", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("DevExpress.ExpressApp.Editors.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("DevExpress.ExpressApp.Editors.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("DevExpress.Persistent.Base", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("DevExpress.Persistent.Base.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("DevExpress.Persistent.Base.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("DevExpress.ExpressApp", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("DevExpress.ExpressApp.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("DevExpress.ExpressApp.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("System.Reflection", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("System.Reflection.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("System.Reflection.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("Default", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("Default.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("Default.", clientType.Name)
            End If

            If clientType.[Namespace].Equals("System", Global.System.StringComparison.Ordinal) Then
                If originalNameAttribute IsNot Nothing Then
                    Return String.Concat("System.", originalNameAttribute.OriginalName)
                End If

                Return String.Concat("System.", clientType.Name)
            End If

            If originalNameAttribute IsNot Nothing Then
                Return clientType.[Namespace] & "." & originalNameAttribute.OriginalName
            End If

            Return clientType.FullName
        End Function

        ''' <summary>
        ''' There are no comments for OrderItem in the schema.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        <Global.Microsoft.OData.Client.OriginalNameAttribute("OrderItem")>
        Public Overridable ReadOnly Property OrderItem As Global.Microsoft.OData.Client.DataServiceQuery(Of Global.OData.Server.BusinessObjects.OrderItem)
            Get
                If _OrderItem Is Nothing Then
                    _OrderItem = Me.CreateQuery(Of Global.OData.Server.BusinessObjects.OrderItem)("OrderItem")
                End If

                Return _OrderItem
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Private _OrderItem As Global.Microsoft.OData.Client.DataServiceQuery(Of Global.OData.Server.BusinessObjects.OrderItem)

        ''' <summary>
        ''' There are no comments for OrderItem in the schema.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Public Overridable Sub AddToOrderItem(ByVal orderItem As Global.OData.Server.BusinessObjects.OrderItem)
            Me.AddObject("OrderItem", orderItem)
        End Sub

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
        Private MustInherit Class GeneratedEdmModel

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
            Private Shared ParsedModel As Global.Microsoft.OData.Edm.IEdmModel = LoadModelFromString()

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
            Private Const filePath As String = "OData ServiceCsdl.xml"

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
            Public Shared Function GetInstance() As Global.Microsoft.OData.Edm.IEdmModel
                Return ParsedModel
            End Function

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
            Private Shared Function LoadModelFromString() As Global.Microsoft.OData.Edm.IEdmModel
                Dim reader As Global.System.Xml.XmlReader = CreateXmlReader()
                Try
                    Dim errors As Global.System.Collections.Generic.IEnumerable(Of Global.Microsoft.OData.Edm.Validation.EdmError)
                    Dim edmModel As Global.Microsoft.OData.Edm.IEdmModel
                    If Not Global.Microsoft.OData.Edm.Csdl.CsdlReader.TryParse(reader, True, edmModel, errors) Then
                        Dim errorMessages As Global.System.Text.StringBuilder = New Global.System.Text.StringBuilder()
                        For Each [error] In errors
                            errorMessages.Append([error].ErrorMessage)
                            errorMessages.Append("; ")
                        Next

                        Throw New Global.System.InvalidOperationException(errorMessages.ToString())
                    End If

                    Return edmModel
                Finally
                    CType(reader, Global.System.IDisposable).Dispose()
                End Try
            End Function

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
            Private Shared Function CreateXmlReader(ByVal edmxToParse As String) As Global.System.Xml.XmlReader
                Return Global.System.Xml.XmlReader.Create(New Global.System.IO.StringReader(edmxToParse))
            End Function

            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "#VersionNumber#")>
            Private Shared Function CreateXmlReader() As Global.System.Xml.XmlReader
                Try
                    Dim assembly = Global.System.Reflection.Assembly.GetExecutingAssembly()
                    Dim resourcePath = Global.System.Linq.Enumerable.[Single](assembly.GetManifestResourceNames(), Function(str) str.EndsWith(filePath))
                    Dim stream As Global.System.IO.Stream = assembly.GetManifestResourceStream(resourcePath)
                    Return Global.System.Xml.XmlReader.Create(New Global.System.IO.StreamReader(stream))
                Catch e As Global.System.Xml.XmlException
                    Throw New Global.System.Xml.XmlException("Failed to create an XmlReader from the stream. Check if the resource exists.", e)
                End Try
            End Function
        End Class
    End Class
End Namespace
